"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var prop_types_1 = __importDefault(require("prop-types"));
var react_redux_1 = require("react-redux");
var compose_1 = __importDefault(require("recompose/compose"));
var inflection_1 = __importDefault(require("inflection"));
var ra_core_1 = require("ra-core");
var selectors_1 = require("./selectors");
var actions_1 = require("./actions");
var TreeController = /** @class */ (function (_super) {
    __extends(TreeController, _super);
    function TreeController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.updateData = function (props) {
            props.crudGetTreeRootNodes({
                resource: props.resource,
                parentSource: props.parentSource,
                positionSource: props.positionSource,
            });
        };
        return _this;
    }
    TreeController.prototype.componentDidMount = function () {
        this.updateData(this.props);
    };
    TreeController.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.version !== this.props.version ||
            prevProps.resource !== this.props.resource) {
            this.updateData(this.props);
        }
    };
    TreeController.prototype.render = function () {
        var _a = this.props, children = _a.children, crudGetTreeRootNodes = _a.crudGetTreeRootNodes, parentSource = _a.parentSource, resource = _a.resource, rootNodes = _a.rootNodes, translate = _a.translate, props = __rest(_a, ["children", "crudGetTreeRootNodes", "parentSource", "resource", "rootNodes", "translate"]);
        var resourceName = translate("resources." + resource + ".name", {
            smart_count: 2,
            _: inflection_1.default.humanize(inflection_1.default.pluralize(resource)),
        });
        var defaultTitle = translate('ra.page.list', {
            name: resourceName,
        });
        return children(__assign({ defaultTitle: defaultTitle,
            parentSource: parentSource, nodes: rootNodes, resource: resource }, props));
    };
    TreeController.propTypes = {
        basePath: prop_types_1.default.string.isRequired,
        children: prop_types_1.default.func.isRequired,
        parentSource: prop_types_1.default.string,
        resource: prop_types_1.default.string.isRequired,
    };
    return TreeController;
}(react_1.Component));
exports.TreeController = TreeController;
var mapStateToProps = function (state, _a) {
    var resource = _a.resource;
    return ({
        rootNodes: selectors_1.getTreeRootNodes(state, resource),
        loading: state.admin.loading > 0,
        version: state.admin.ui.viewVersion,
    });
};
var EnhancedTreeController = compose_1.default(react_redux_1.connect(mapStateToProps, {
    crudGetTreeRootNodes: actions_1.crudGetTreeRootNodes,
}), ra_core_1.withTranslate)(TreeController);
EnhancedTreeController.defaultProps = {
    parentSource: 'parent_id',
};
exports.default = EnhancedTreeController;
