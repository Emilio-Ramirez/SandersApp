"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CRUD_GET_TREE_ROOT_NODES = 'RA/CRUD_GET_TREE_ROOT_NODES';
exports.CRUD_GET_TREE_ROOT_NODES_SUCCESS = 'RA/CRUD_GET_TREE_ROOT_NODES_SUCCESS';
exports.CRUD_GET_TREE_ROOT_NODES_LOADING = 'RA/CRUD_GET_TREE_ROOT_NODES_LOADING';
exports.CRUD_GET_TREE_ROOT_NODES_FAILURE = 'RA/CRUD_GET_TREE_ROOT_NODES_FAILURE';
exports.GET_TREE_ROOT_NODES = 'GET_TREE_ROOT_NODES';
exports.crudGetTreeRootNodes = function (_a) {
    var resource = _a.resource, parentSource = _a.parentSource, positionSource = _a.positionSource;
    return ({
        type: exports.CRUD_GET_TREE_ROOT_NODES,
        meta: {
            resource: resource,
            parentSource: parentSource,
            positionSource: positionSource,
            fetch: exports.GET_TREE_ROOT_NODES,
        },
    });
};
exports.CRUD_GET_TREE_CHILDREN_NODES = 'RA/CRUD_GET_TREE_CHILDREN_NODES';
exports.CRUD_GET_TREE_CHILDREN_NODES_SUCCESS = 'RA/CRUD_GET_TREE_CHILDREN_NODES_SUCCESS';
exports.CRUD_GET_TREE_CHILDREN_NODES_LOADING = 'RA/CRUD_GET_TREE_CHILDREN_NODES_LOADING';
exports.CRUD_GET_TREE_CHILDREN_NODES_FAILURE = 'RA/CRUD_GET_TREE_CHILDREN_NODES_FAILURE';
exports.GET_TREE_CHILDREN_NODES = 'GET_TREE_CHILDREN_NODES';
exports.crudGetTreeChildrenNodes = function (_a) {
    var resource = _a.resource, parentSource = _a.parentSource, positionSource = _a.positionSource, nodeId = _a.nodeId;
    return ({
        type: exports.CRUD_GET_TREE_CHILDREN_NODES,
        payload: { id: nodeId },
        meta: {
            resource: resource,
            parentSource: parentSource,
            positionSource: positionSource,
            fetch: exports.GET_TREE_CHILDREN_NODES,
        },
    });
};
exports.CRUD_MOVE_NODE = 'RA/TREE/CRUD_MOVE_NODE';
exports.MOVE_NODE = 'MOVE_NODE';
exports.crudMoveNode = function (_a) {
    var resource = _a.resource, data = _a.data, parentSource = _a.parentSource, positionSource = _a.positionSource, previousData = _a.previousData, _b = _a.refresh, refresh = _b === void 0 ? true : _b, redirectTo = _a.redirectTo, basePath = _a.basePath;
    return ({
        type: exports.CRUD_MOVE_NODE,
        payload: {
            data: data,
            previousData: previousData,
        },
        meta: {
            resource: resource,
            parentSource: parentSource,
            positionSource: positionSource,
            fetch: exports.MOVE_NODE,
            onSuccess: {
                notification: {
                    body: 'ra.notification.updated',
                    level: 'info',
                    messageArgs: {
                        smart_count: 1,
                    },
                },
                refresh: refresh,
                redirectTo: redirectTo,
                basePath: basePath,
            },
            onFailure: {
                notification: {
                    body: 'ra.notification.http_error',
                    level: 'warning',
                },
            },
        },
    });
};
exports.TOGGLE_NODE = 'RA/TREE/TOGGLE_NODE';
exports.toggleNode = function (_a) {
    var resource = _a.resource, nodeId = _a.nodeId;
    return ({
        type: exports.TOGGLE_NODE,
        payload: nodeId,
        meta: { resource: resource },
    });
};
exports.EXPAND_NODE = 'RA/TREE/EXPAND_NODE';
exports.expandNode = function (_a) {
    var resource = _a.resource, nodeId = _a.nodeId;
    return ({
        type: exports.EXPAND_NODE,
        payload: nodeId,
        meta: { resource: resource },
    });
};
exports.CLOSE_NODE = 'RA/TREE/CLOSE_NODE';
exports.closeNode = function (_a) {
    var resource = _a.resource, nodeId = _a.nodeId;
    return ({
        type: exports.CLOSE_NODE,
        payload: nodeId,
        meta: { resource: resource },
    });
};
