export declare const CRUD_GET_TREE_ROOT_NODES = "RA/CRUD_GET_TREE_ROOT_NODES";
export declare const CRUD_GET_TREE_ROOT_NODES_SUCCESS = "RA/CRUD_GET_TREE_ROOT_NODES_SUCCESS";
export declare const CRUD_GET_TREE_ROOT_NODES_LOADING = "RA/CRUD_GET_TREE_ROOT_NODES_LOADING";
export declare const CRUD_GET_TREE_ROOT_NODES_FAILURE = "RA/CRUD_GET_TREE_ROOT_NODES_FAILURE";
export declare const GET_TREE_ROOT_NODES = "GET_TREE_ROOT_NODES";
export declare const crudGetTreeRootNodes: ({ resource, parentSource, positionSource, }: {
    resource: any;
    parentSource: any;
    positionSource: any;
}) => {
    type: string;
    meta: {
        resource: any;
        parentSource: any;
        positionSource: any;
        fetch: string;
    };
};
export declare const CRUD_GET_TREE_CHILDREN_NODES = "RA/CRUD_GET_TREE_CHILDREN_NODES";
export declare const CRUD_GET_TREE_CHILDREN_NODES_SUCCESS = "RA/CRUD_GET_TREE_CHILDREN_NODES_SUCCESS";
export declare const CRUD_GET_TREE_CHILDREN_NODES_LOADING = "RA/CRUD_GET_TREE_CHILDREN_NODES_LOADING";
export declare const CRUD_GET_TREE_CHILDREN_NODES_FAILURE = "RA/CRUD_GET_TREE_CHILDREN_NODES_FAILURE";
export declare const GET_TREE_CHILDREN_NODES = "GET_TREE_CHILDREN_NODES";
export declare const crudGetTreeChildrenNodes: ({ resource, parentSource, positionSource, nodeId, }: {
    resource: any;
    parentSource: any;
    positionSource: any;
    nodeId: any;
}) => {
    type: string;
    payload: {
        id: any;
    };
    meta: {
        resource: any;
        parentSource: any;
        positionSource: any;
        fetch: string;
    };
};
export declare const CRUD_MOVE_NODE = "RA/TREE/CRUD_MOVE_NODE";
export declare const MOVE_NODE = "MOVE_NODE";
export declare const crudMoveNode: ({ resource, data, parentSource, positionSource, previousData, refresh, redirectTo, basePath, }: {
    resource: any;
    data: any;
    parentSource: any;
    positionSource: any;
    previousData: any;
    refresh?: boolean;
    redirectTo: any;
    basePath: any;
}) => {
    type: string;
    payload: {
        data: any;
        previousData: any;
    };
    meta: {
        resource: any;
        parentSource: any;
        positionSource: any;
        fetch: string;
        onSuccess: {
            notification: {
                body: string;
                level: string;
                messageArgs: {
                    smart_count: number;
                };
            };
            refresh: boolean;
            redirectTo: any;
            basePath: any;
        };
        onFailure: {
            notification: {
                body: string;
                level: string;
            };
        };
    };
};
export declare const TOGGLE_NODE = "RA/TREE/TOGGLE_NODE";
export declare const toggleNode: ({ resource, nodeId }: {
    resource: any;
    nodeId: any;
}) => {
    type: string;
    payload: any;
    meta: {
        resource: any;
    };
};
export declare const EXPAND_NODE = "RA/TREE/EXPAND_NODE";
export declare const expandNode: ({ resource, nodeId }: {
    resource: any;
    nodeId: any;
}) => {
    type: string;
    payload: any;
    meta: {
        resource: any;
    };
};
export declare const CLOSE_NODE = "RA/TREE/CLOSE_NODE";
export declare const closeNode: ({ resource, nodeId }: {
    resource: any;
    nodeId: any;
}) => {
    type: string;
    payload: any;
    meta: {
        resource: any;
    };
};
