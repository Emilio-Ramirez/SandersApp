import { Component, ReactElement, ComponentType } from 'react';
import PropTypes from 'prop-types';
import { Identifier, Translate } from 'ra-core';
import { crudGetTreeRootNodes as crudGetTreeRootNodesAction } from './actions';
export declare type TreeControllerChildrenFunction = (params: {
    basePath: string;
    hasCreate: boolean;
    hasEdit: boolean;
    hasList: boolean;
    hasShow: boolean;
    nodes: Identifier[];
    parentSource: string;
    positionSource: string;
    resource: string;
    [key: string]: any;
}) => ReactElement<any>;
interface Props {
    children: TreeControllerChildrenFunction;
    parentSource: string;
    positionSource: string;
}
interface InjectedProps {
    basePath: string;
    hasCreate: boolean;
    hasEdit: boolean;
    hasList: boolean;
    hasShow: boolean;
    resource: string;
    translate: Translate;
}
interface StateProps {
    loading: boolean;
    rootNodes: Identifier[];
    version: number;
}
interface DispatchProps {
    crudGetTreeRootNodes: typeof crudGetTreeRootNodesAction;
}
export declare class TreeController extends Component<Props & InjectedProps & StateProps & DispatchProps> {
    static propTypes: {
        basePath: PropTypes.Validator<string>;
        children: PropTypes.Validator<(...args: any[]) => any>;
        parentSource: PropTypes.Requireable<string>;
        resource: PropTypes.Validator<string>;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    updateData: (props: any) => void;
    render(): ReactElement<any>;
}
declare const _default: ComponentType<Props>;
export default _default;
