var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { EXPAND_NODE, CLOSE_NODE, TOGGLE_NODE } from '../actions';
var expandedReducer = function (previousState, _a) {
    if (previousState === void 0) { previousState = {}; }
    var payload = _a.payload, type = _a.type;
    var _b, _c, _d;
    switch (type) {
        case EXPAND_NODE:
            return __assign({}, previousState, (_b = {}, _b[payload] = true, _b));
        case CLOSE_NODE:
            return __assign({}, previousState, (_c = {}, _c[payload] = false, _c));
        case TOGGLE_NODE:
            return __assign({}, previousState, (_d = {}, _d[payload] = previousState[payload]
                ? !previousState[payload]
                : true, _d));
        default:
            return previousState;
    }
};
export default expandedReducer;
