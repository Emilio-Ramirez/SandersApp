var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import React, { Children, cloneElement, } from 'react';
import { connect } from 'react-redux';
import compose from 'recompose/compose';
import { withStyles } from '@material-ui/core/styles';
import List from '@material-ui/core/List';
import { getTreeNodes } from 'ra-tree-core';
var TreeNodeListView = function (_a) {
    var basePath = _a.basePath, children = _a.children, classes = _a.classes, data = _a.data, hasCreate = _a.hasCreate, hasEdit = _a.hasEdit, hasList = _a.hasList, hasShow = _a.hasShow, loading = _a.loading, nodes = _a.nodes, parentSource = _a.parentSource, positionSource = _a.positionSource, resource = _a.resource, props = __rest(_a, ["basePath", "children", "classes", "data", "hasCreate", "hasEdit", "hasList", "hasShow", "loading", "nodes", "parentSource", "positionSource", "resource"]);
    return (React.createElement(List, __assign({ classes: {
            root: classes.root,
        }, dense: true, disablePadding: true }, props), data.map(function (record) {
        // Necessary because of a possible race condition leading to a null record
        // when user expand/close multiple times very quickly
        return record
            ? cloneElement(Children.only(children), {
                basePath: basePath,
                hasCreate: hasCreate,
                hasEdit: hasEdit,
                hasList: hasList,
                hasShow: hasShow,
                key: record.id,
                nodeChildren: children,
                parentSource: parentSource,
                positionSource: positionSource,
                record: record,
                resource: resource,
            })
            : null;
    })));
};
export var styles = {
    root: {
        display: 'flex',
        flexDirection: 'column',
    },
};
var mapStateToProps = function (state, _a) {
    var resource = _a.resource, nodes = _a.nodes;
    return ({
        data: getTreeNodes(state, resource, nodes),
    });
};
var TreeNodeList = compose(withStyles(styles), connect(mapStateToProps, {}))(TreeNodeListView);
export default TreeNodeList;
