"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var classnames_1 = __importDefault(require("classnames"));
var Card_1 = __importDefault(require("@material-ui/core/Card"));
var styles_1 = require("@material-ui/core/styles");
var ra_tree_core_1 = require("ra-tree-core");
var ra_ui_materialui_1 = require("ra-ui-materialui");
var withDragDropContext_1 = __importDefault(require("./withDragDropContext"));
var TreeListActions_1 = __importDefault(require("./TreeListActions"));
var TreeListToolbar_1 = __importDefault(require("./TreeListToolbar"));
var Tree = /** @class */ (function (_super) {
    __extends(Tree, _super);
    function Tree() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tree.prototype.componentDidMount = function () {
        var childrenCount = react_1.Children.count(this.props.children);
        if (childrenCount > 1 && process.env.NODE_ENV !== 'production') {
            warnAboutChildren();
        }
    };
    Tree.prototype.render = function () {
        var _a = this.props, children = _a.children, parentSource = _a.parentSource, positionSource = _a.positionSource, props = __rest(_a, ["children", "parentSource", "positionSource"]);
        return (react_1.default.createElement(ra_tree_core_1.TreeController, __assign({ parentSource: parentSource, positionSource: positionSource }, props), function (controllerProps) { return (react_1.default.createElement(TreeView, __assign({}, controllerProps), children)); }));
    };
    Tree.propTypes = {
        actions: prop_types_1.default.element,
        aside: prop_types_1.default.element,
        basePath: prop_types_1.default.string.isRequired,
        children: prop_types_1.default.node,
        classes: prop_types_1.default.object,
        className: prop_types_1.default.string,
        exporter: prop_types_1.default.func,
        filter: prop_types_1.default.object,
        parentSource: prop_types_1.default.string.isRequired,
        positionSource: prop_types_1.default.string,
        resource: prop_types_1.default.string.isRequired,
        title: prop_types_1.default.string,
        version: prop_types_1.default.number,
    };
    Tree.defaultProps = {
        classes: {},
        parentSource: 'parent_id',
        positionSource: 'position',
    };
    return Tree;
}(react_1.Component));
exports.Tree = Tree;
exports.default = withDragDropContext_1.default(Tree);
exports.styles = styles_1.createStyles({
    root: {
        display: 'flex',
        flex: 1,
    },
    card: {
        position: 'relative',
        flex: '1 1 auto',
    },
    actions: {
        zIndex: 2,
        display: 'flex',
        justifyContent: 'flex-end',
        flexWrap: 'wrap',
    },
});
var TreeView = styles_1.withStyles(exports.styles)(function (_a) {
    var _b = _a.actions, actions = _b === void 0 ? react_1.default.createElement(TreeListActions_1.default, null) : _b, aside = _a.aside, children = _a.children, className = _a.className, classes = _a.classes, defaultTitle = _a.defaultTitle, exporter = _a.exporter, filter = _a.filter, title = _a.title, version = _a.version, props = __rest(_a, ["actions", "aside", "children", "className", "classes", "defaultTitle", "exporter", "filter", "title", "version"]);
    return (react_1.default.createElement("div", __assign({ className: classnames_1.default('tree-page', classes.root, className) }, sanitizeRestProps(props)),
        react_1.default.createElement(ra_ui_materialui_1.Title, { title: title, defaultTitle: defaultTitle }),
        react_1.default.createElement(Card_1.default, { className: classes.card },
            actions && (react_1.default.createElement(TreeListToolbar_1.default, __assign({}, props, { actions: actions, exporter: exporter, permanentFilter: filter }))),
            react_1.default.createElement("div", { key: version }, react_1.cloneElement(children, props))),
        aside && react_1.cloneElement(aside, props)));
});
var warnAboutChildren = function () {
    return console.warn(
    // eslint-disable-line
    "You passed multiple children to the Tree component.\n\n    <Tree>\n        <TreeList>\n            <TreeNode>\n                <TextField source=\"name\" />\n            </TreeNode>\n        </TreeList>\n    </Tree>\n\nIf you need actions on each node, use the actions prop on the TreeNode component:\n\n    const MyNodeActions = props => (\n        <TreeNodeActions {...props}>\n            <EditButton />\n            <ShowButton />\n            <DeleteButton />\n        </TreeNodeActions>\n    );\n\n    <Tree>\n        <TreeList>\n            <TreeNode actions={<MyNodeActions />}>\n                <TextField source=\"name\" />\n            </TreeNode>\n        </TreeList>\n    </Tree>\n");
};
var sanitizeRestProps = function (_a) {
    var basePath = _a.basePath, children = _a.children, classes = _a.classes, closeNode = _a.closeNode, data = _a.data, expandNode = _a.expandNode, hasCreate = _a.hasCreate, hasEdit = _a.hasEdit, hasList = _a.hasList, hasShow = _a.hasShow, history = _a.history, loading = _a.loading, locale = _a.locale, location = _a.location, match = _a.match, nodes = _a.nodes, options = _a.options, parentSource = _a.parentSource, permissions = _a.permissions, positionSource = _a.positionSource, resource = _a.resource, toggleNode = _a.toggleNode, version = _a.version, rest = __rest(_a, ["basePath", "children", "classes", "closeNode", "data", "expandNode", "hasCreate", "hasEdit", "hasList", "hasShow", "history", "loading", "locale", "location", "match", "nodes", "options", "parentSource", "permissions", "positionSource", "resource", "toggleNode", "version"]);
    return rest;
};
