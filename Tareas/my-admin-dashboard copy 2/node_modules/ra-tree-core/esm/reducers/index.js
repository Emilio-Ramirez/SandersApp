var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import data from './data';
import nodes from './nodes';
import expanded from './expanded';
import loading from './loading';
var initialState = {};
export default (function (previousState, action) {
    if (previousState === void 0) { previousState = initialState; }
    var _a;
    if (!action.meta || !action.meta.resource) {
        return previousState;
    }
    var previousResource = previousState[action.meta.resource] || {};
    return __assign({}, previousState, (_a = {}, _a[action.meta.resource] = {
        data: data(previousResource.data, action),
        nodes: nodes(previousResource.nodes, action),
        expanded: expanded(previousResource.expanded, action),
        loading: loading(previousResource.loading, action),
    }, _a));
});
