var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import React from 'react';
import PropTypes from 'prop-types';
import onlyUpdateForKeys from 'recompose/onlyUpdateForKeys';
import { sanitizeListRestProps } from 'ra-core';
import { CardActions, CreateButton, ExportButton } from 'react-admin';
var TreeListActions = function (_a) {
    var basePath = _a.basePath, className = _a.className, closeNode = _a.closeNode, currentSort = _a.currentSort, expandNode = _a.expandNode, exporter = _a.exporter, hasCreate = _a.hasCreate, hasEdit = _a.hasEdit, hasList = _a.hasList, hasShow = _a.hasShow, loading = _a.loading, parentSource = _a.parentSource, permanentFilter = _a.permanentFilter, positionSource = _a.positionSource, resource = _a.resource, toggleNode = _a.toggleNode, total = _a.total, rest = __rest(_a, ["basePath", "className", "closeNode", "currentSort", "expandNode", "exporter", "hasCreate", "hasEdit", "hasList", "hasShow", "loading", "parentSource", "permanentFilter", "positionSource", "resource", "toggleNode", "total"]);
    return (React.createElement(CardActions, __assign({ className: className }, sanitizeListRestProps(rest)),
        hasCreate && React.createElement(CreateButton, { basePath: basePath }),
        exporter !== false && (React.createElement(ExportButton, { disabled: total === 0, resource: resource, sort: currentSort, filter: permanentFilter, exporter: exporter }))));
};
TreeListActions.propTypes = {
    basePath: PropTypes.string,
    className: PropTypes.string,
    exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    hasCreate: PropTypes.bool,
    resource: PropTypes.string,
};
export default onlyUpdateForKeys(['resource'])(TreeListActions);
