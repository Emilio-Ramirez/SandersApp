import React, { Component, ReactElement } from 'react';
import PropTypes from 'prop-types';
import { Record, Dispatch } from 'ra-core';
declare type FetchRelatedData = () => void;
declare type Exporter = (data: Record[], fetchRelatedData: FetchRelatedData, dispatch: Dispatch<any>) => void;
interface Props {
    actions?: ReactElement<any>;
    aside?: ReactElement<any>;
    children: ReactElement<any>;
    className?: string;
    exporter?: Exporter;
    filter?: object;
    parentSource: string;
    positionSource?: string;
    title?: string;
}
interface InjectedProps {
    basePath: string;
    resource: string;
    version: number;
}
export declare class Tree extends Component<Props & InjectedProps> {
    static propTypes: {
        actions: PropTypes.Requireable<PropTypes.ReactElementLike>;
        aside: PropTypes.Requireable<PropTypes.ReactElementLike>;
        basePath: PropTypes.Validator<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        classes: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        exporter: PropTypes.Requireable<(...args: any[]) => any>;
        filter: PropTypes.Requireable<object>;
        parentSource: PropTypes.Validator<string>;
        positionSource: PropTypes.Requireable<string>;
        resource: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        version: PropTypes.Requireable<number>;
    };
    static defaultProps: {
        classes: {};
        parentSource: string;
        positionSource: string;
    };
    componentDidMount(): void;
    render(): JSX.Element;
}
declare const _default: React.ComponentType<Props>;
export default _default;
export declare const styles: {
    root: import("@material-ui/core/styles/withStyles").CSSProperties;
    actions: import("@material-ui/core/styles/withStyles").CSSProperties;
    card: import("@material-ui/core/styles/withStyles").CSSProperties;
};
