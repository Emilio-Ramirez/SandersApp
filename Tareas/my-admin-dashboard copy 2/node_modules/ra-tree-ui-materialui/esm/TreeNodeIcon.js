import React from 'react';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import IconButton from '@material-ui/core/IconButton';
import KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';
import KeyboardArrowDown from '@material-ui/icons/KeyboardArrowDown';
import CircularProgress from '@material-ui/core/CircularProgress';
import { withStyles } from '@material-ui/core/styles';
import compose from 'recompose/compose';
import { withTranslate } from 'ra-core';
var TreeNodeIconView = function (_a) {
    var classes = _a.classes, expanded = _a.expanded, hasChildren = _a.hasChildren, loading = _a.loading, onClick = _a.onClick, translate = _a.translate;
    return (React.createElement(ListItemIcon, null, loading ? (React.createElement("div", { className: classes.icon },
        React.createElement(CircularProgress, { size: "1em" }))) : hasChildren ? (React.createElement(IconButton, { className: classes.button, "aria-label": translate(expanded ? 'ra.tree.close' : 'ra.tree.expand'), title: translate(expanded ? 'ra.tree.close' : 'ra.tree.expand'), onClick: onClick }, expanded ? React.createElement(KeyboardArrowDown, null) : React.createElement(KeyboardArrowRight, null))) : (React.createElement(KeyboardArrowRight, { className: classes.invisible }))));
};
var styles = function (theme) { return ({
    button: {
        height: theme.spacing.unit * 3,
        width: theme.spacing.unit * 3,
    },
    icon: {
        alignItems: 'center',
        display: 'inline-flex',
        flex: '0 0 auto',
        fontSize: '1.5rem',
        height: theme.spacing.unit * 3,
        justifyContent: 'baseline',
        position: 'relative',
        verticalAlign: 'middle',
        width: theme.spacing.unit * 3,
    },
    invisible: {
        opacity: 0,
    },
}); };
var TreeNodeIcon = compose(withStyles(styles), withTranslate)(TreeNodeIconView);
export default TreeNodeIcon;
