var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { Children, cloneElement, isValidElement, } from 'react';
import { withStyles, createStyles, } from '@material-ui/core/styles';
import classnames from 'classnames';
var styles = function (theme) {
    return createStyles({
        root: {
            marginLeft: 'auto',
            paddingRight: theme.spacing.unit * 3,
        },
    });
};
/**
 * Component used to position node actions correctly.
 *
 * // Usage with as a DropDown menu (recommanded)
 * @example
 * const TagNodeActions = props => (
 *     <TreeNodeActions {...props}>
 *         <TreeNodeActionsMenu {...props}>
 *             <AddChildNodeMenuItem />
 *             <AddNodeBeforeMenuItem />
 *             <AddNodeAfterMenuItem />
 *             <EditMenuItem />
 *             <DeleteMenuItem />
 *         </TreeNodeActionsMenu>
 *     </TreeNodeActions>
 * );
 * export const TagsList = (props) => (
 *     <Tree {...props}>
 *         <TreeList>
 *             <TreeNode actions={<TagNodeActions />}>
 *                 <TextField source="name" />
 *             </TreeNode>
 *         </TreeList>
 *     </Tree>
 * );
 * // Usage with standard react admin buttons
 * @example
 * const TagNodeActions = props => (
 *     <TreeNodeActions {...props}>
 *         <EditButton />
 *         <DeleteButton />
 *     </TreeNodeActions>
 * );
 * export const TagsList = (props) => (
 *     <Tree {...props}>
 *         <TreeList>
 *             <TreeNode actions={<TagNodeActions />}>
 *                 <TextField source="name" />
 *             </TreeNode>
 *         </TreeList>
 *     </Tree>
 * );
 */
var TreeNodeActions = withStyles(styles)(function (_a) {
    var basePath = _a.basePath, children = _a.children, classes = _a.classes, className = _a.className, parentSource = _a.parentSource, positionSource = _a.positionSource, record = _a.record, resource = _a.resource;
    return (React.createElement("div", { className: classnames(classes.root, className) }, Children.map(children, function (child) {
        return isValidElement(child)
            ? cloneElement(child, __assign({ basePath: basePath,
                record: record,
                parentSource: parentSource,
                positionSource: positionSource,
                resource: resource }, child.props))
            : null;
    })));
});
export default TreeNodeActions;
